/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.18 nami.glb 
*/
import React, { useRef, useEffect, useMemo } from "react";
import { useFrame } from '@react-three/fiber';
import { useGLTF, useAnimations } from "@react-three/drei";
import * as THREE from 'three'
import HolographicMaterial from "../../assets/shaders/HolographicMaterial"

export function Model(props) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF(
    "../../../public/models/3D/nami-transformed.glb"
  );
  const { actions } = useAnimations(animations, group);

  const hologramMaterial = useMemo(() => {
    return new HolographicMaterial({
      time: 0.0,
      fresnelOpacity: 0.5,
      fresnelAmount: 1.5,
      scanlineSize: 10.0,
      hologramBrightness: 1.5,
      signalSpeed: 1.0,
      hologramColor: '#51a4de',
      enableBlinking: false,
      blinkFresnelOnly: true,
      hologramOpacity: 1.0,
      blendMode: THREE.NoBlending,
      side: THREE.DoubleSide,
      depthTest: true,
      depthWrite: true
    })
  }, [])

  // Aplicar el material hologrÃ¡fico a todas las mallas
  useEffect(() => {
    group.current.traverse((child) => {
      if (child.isMesh) {
        child.material = hologramMaterial
      }
    })
  }, [hologramMaterial])

  // Actualizar el material en cada frame
  useFrame((state, delta) => {
    if (hologramMaterial) {
      hologramMaterial.uniforms.time.value += delta
    }
  })

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <mesh
          name="Ch29"
          geometry={nodes.Ch29.geometry}
          material={hologramMaterial}
          rotation={[Math.PI / 2, 0, 5]}
          scale={0.13}
          position={[0, -10, 0]}
        />
      </group>
    </group>
  );
}

useGLTF.preload("../../../public/models/3D/nami.glb");
